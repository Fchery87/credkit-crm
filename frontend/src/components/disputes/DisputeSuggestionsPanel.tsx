"use client";

import { AlertCircle, Loader2, RefreshCw } from "lucide-react";
import { memo } from "react";

import { useDisputeSuggestions } from "@/hooks/useDisputeSuggestions";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

interface DisputeSuggestionsPanelProps {
  clientId?: string;
}

const DisputeSuggestionsPanel = ({ clientId }: DisputeSuggestionsPanelProps) => {
  const hasClient = typeof clientId === "string" && clientId.length > 0;
  const { suggestions, runId, loading, error, refresh } = useDisputeSuggestions(
    hasClient ? clientId : undefined,
  );

  if (!hasClient) {
    return (
      <p className="text-sm text-muted-foreground">
        Select a client to load dispute suggestions.
      </p>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
        <div>
          <h3 className="h4">Automated Suggestions</h3>
          <p className="text-sm text-muted-foreground">
            Generated by the rules engine. Run ID: {runId ? runId : "pending"}
          </p>
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={refresh}
          loading={loading}
          className="md:self-start"
        >
          <RefreshCw className={cn("w-4 h-4", loading && "hidden")}
 />
          {loading ? "Refreshing" : "Refresh"}
        </Button>
      </div>

      {error && (
        <div className="flex items-start gap-2 rounded-xl border border-destructive/40 bg-destructive/10 p-3 text-sm text-destructive">
          <AlertCircle className="mt-0.5 h-4 w-4 shrink-0" />
          <span>{error}</span>
        </div>
      )}

      {loading && suggestions.length === 0 && !error && (
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Loader2 className="h-4 w-4 animate-spin" />
          Generating updated suggestionsâ€¦
        </div>
      )}

      {!loading && !error && suggestions.length === 0 && (
        <div className="rounded-xl border border-dashed border-muted p-6 text-sm text-muted-foreground">
          No dispute suggestions at the moment. Upload a processed credit report to trigger the rules engine.
        </div>
      )}

      <div className="space-y-4">
        {suggestions.map((suggestion, index) => (
          <div key={`${suggestion.item_type}-${suggestion.account_ref}-${index}`} className="rounded-xl border border-muted/40 bg-background/60 p-5 shadow-soft">
            <div className="flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
              <div className="flex flex-wrap items-center gap-2">
                <Badge variant="secondary">{suggestion.item_type}</Badge>
                {suggestion.furnisher && (
                  <span className="font-medium">{suggestion.furnisher}</span>
                )}
              </div>
              {suggestion.account_ref && (
                <span className="text-xs uppercase tracking-wide text-muted-foreground">
                  Account Ref: {suggestion.account_ref}
                </span>
              )}
            </div>

            {suggestion.reason_codes.length > 0 && (
              <div className="mt-4 flex flex-wrap gap-2">
                {suggestion.reason_codes.map((code) => (
                  <Badge key={code} variant="outline" className="uppercase tracking-wide">
                    {code.replace(/_/g, ' ')}
                  </Badge>
                ))}
              </div>
            )}

            {suggestion.bureaus.length > 0 && (
              <div className="mt-4 flex flex-wrap gap-2 text-xs text-muted-foreground">
                <span className="font-medium text-foreground">Bureaus:</span>
                {suggestion.bureaus.map((bureau) => (
                  <Badge key={bureau} variant="secondary" className="bg-muted text-muted-foreground">
                    {bureau.toUpperCase()}
                  </Badge>
                ))}
              </div>
            )}

            {suggestion.evidence && Object.keys(suggestion.evidence).length > 0 && (
              <pre className="mt-4 max-h-48 overflow-auto rounded-lg bg-muted/50 p-3 text-xs text-muted-foreground">
                {JSON.stringify(suggestion.evidence, null, 2)}
              </pre>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default memo(DisputeSuggestionsPanel);
